{
  "hash": "cf0147abc8166f53151da6dc356ed3be",
  "result": {
    "markdown": "---\ntitle: \"Mini-Project 1: Simulation\"\nauthor: \"Tanner Bessette\"\ndate: \"01-29-2025\"\nformat: pdf\n---\n\n\nI have followed all rules for collaboration for this project, and I have not used generative AI on this project.\n\n\n::: {.cell}\n\n:::\n\n\n## Normal Distribution\n\nSampling Distribution of the Sample Minimum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nmu <- 10     # population mean\nsigma <- 2   # population standard deviation\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rnorm(n, mu, sigma) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.35  8.62 12.98  7.85 11.28\n```\n:::\n\n```{.r .cell-code}\n# compute the sample mean\nsample_min <- min(single_sample)\n# look at the sample mean\nsample_min   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.85\n```\n:::\n\n```{.r .cell-code}\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 500)) |>\n  mutate(xvals_density = dnorm(xvals, mu, sigma))\n\n## plot the population model density curve\nggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  ## add the sample points from your sample\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  ## add a line for the sample mean\n  geom_vline(xintercept = sample_min, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Normal with Mu = 10 and sigma = 2\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_min <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.706301\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## map through th function -- the \\(i) syntax says to just \n## repeat the generate_samp_mean function nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n\n# Calculate E(Ymin) and SE(Ymin)\nE_ymin <- mean(mins)\nSE_ymin <- sd(mins)\nE_ymin \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.685803\n```\n:::\n\n```{.r .cell-code}\nSE_ymin\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.3479\n```\n:::\n\n```{.r .cell-code}\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nnorm_mins_df <- tibble(mins, pop = \"Normal(10, 4)\")\nnorm_mins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 x 2\n    mins pop          \n   <dbl> <chr>        \n 1  8.01 Normal(10, 4)\n 2  7.42 Normal(10, 4)\n 3  6.98 Normal(10, 4)\n 4  8.39 Normal(10, 4)\n 5  9.15 Normal(10, 4)\n 6  7.12 Normal(10, 4)\n 7  6.83 Normal(10, 4)\n 8  8.81 Normal(10, 4)\n 9  9.31 Normal(10, 4)\n10  8.25 Normal(10, 4)\n# i 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nNormal_Min_Hisotgram <- \n  ggplot(data = norm_mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", \n                 bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Means\",\n       title = paste(\"Sampling Distribution of the \n                     Sample Min\"))\n```\n:::\n\n\n$E(Y_{min})$ = 7.6848\n\n$SE(Y_{min})$ = 1.3464\n\nSampling distribution of the sample maximum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nmu <- 10     # population mean\nsigma <- 2   # population standard deviation\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rnorm(n, mu, sigma) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7.32  6.63 12.27  6.75  7.90\n```\n:::\n\n```{.r .cell-code}\n# compute the sample mean\nsample_max <- max(single_sample)\n# look at the sample mean\nsample_max   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.27\n```\n:::\n\n```{.r .cell-code}\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 500)) |>\n  mutate(xvals_density = dnorm(xvals, mu, sigma))\n\n## plot the population model density curve\nggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  ## add the sample points from your sample\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  ## add a line for the sample mean\n  geom_vline(xintercept = sample_max, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Normal with Mu = 10 and sigma = 2\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_max <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.34317\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## map through th function -- the \\(i) syntax says to just \n## repeat the generate_samp_mean function nsim times\nmaxes <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n\n# Calculate E(Ymax) and SE(Ymax)\nE_ymax <- mean(maxes)\nSE_ymax <- sd(maxes)\nE_ymax \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.34007\n```\n:::\n\n```{.r .cell-code}\nSE_ymax\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.316866\n```\n:::\n\n```{.r .cell-code}\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nnorm_maxes_df <- tibble(maxes, pop = \"Normal(10, 4)\")\nnorm_maxes_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 x 2\n   maxes pop          \n   <dbl> <chr>        \n 1  10.7 Normal(10, 4)\n 2  13.2 Normal(10, 4)\n 3  12.5 Normal(10, 4)\n 4  10.9 Normal(10, 4)\n 5  12.0 Normal(10, 4)\n 6  12.3 Normal(10, 4)\n 7  10.9 Normal(10, 4)\n 8  12.2 Normal(10, 4)\n 9  11.6 Normal(10, 4)\n10  10.5 Normal(10, 4)\n# i 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nNormal_Max_Histogram <- \n  ggplot(data = norm_maxes_df, aes(x = maxes)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", \n                 bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Means\",\n       title = \"Sampling Distribution of \n                the Sample Max\")\n```\n:::\n\n\n$E(Y_{max})$ = 12.3333\n\n$SE(Y_{max})$ = 1.35581\n\n\\newpage\n\n## Uniform Distribution\n\nSampling distribution of the sample minimum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\ntheta_1 <- 7      \ntheta_2 <- 13     \n\ngenerate_samp_min <- function(theta_1, theta_2, n) {\n  \n  single_sample <- runif(n, theta_1, theta_2)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(theta_1 = theta_1, theta_2 = theta_2, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8.234625\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## map through th function -- the \\(i) syntax says to just \n## repeat the generate_samp_mean function nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(theta_1 = theta_1, theta_2 = theta_2, n = n))\n\n# Calculate E(Ymin) and SE(Ymin)\nE_ymin_unif <- mean(mins)\nSE_ymin_unif <- sd(mins)\nE_ymin_unif \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8.017131\n```\n:::\n\n```{.r .cell-code}\nSE_ymin_unif\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8551712\n```\n:::\n\n```{.r .cell-code}\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nunif_mins_df <- tibble(mins, pop = \"Uniform(7, 13)\")\nunif_mins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 x 2\n    mins pop           \n   <dbl> <chr>         \n 1  8.07 Uniform(7, 13)\n 2  7.54 Uniform(7, 13)\n 3  7.95 Uniform(7, 13)\n 4  7.46 Uniform(7, 13)\n 5  8.55 Uniform(7, 13)\n 6  7.25 Uniform(7, 13)\n 7  7.41 Uniform(7, 13)\n 8  8.09 Uniform(7, 13)\n 9  7.69 Uniform(7, 13)\n10  8.27 Uniform(7, 13)\n# i 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nUnif_Min_Histogram <- ggplot(data = unif_mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", \n                 bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Means\",\n       title = paste(\"Sampling Distribution of the\n                      Sample Min\"))\n```\n:::\n\n\n$E(Y_{min})$ = 8.0031\n\n$SE(Y_{min})$ = 0.8446\n\nSampling distribution of the sample maximum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\ntheta_1 <- 7      \ntheta_2 <- 13     \n\ngenerate_samp_max <- function(theta_1, theta_2, n) {\n  \n  single_sample <- runif(n, theta_1, theta_2)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(theta_1 = theta_1, theta_2 = theta_2, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.82165\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## map through th function -- the \\(i) syntax says to just \n## repeat the generate_samp_mean function nsim times\nmaxes <- map_dbl(1:nsim, \\(i) generate_samp_max(theta_1 = theta_1, theta_2 = theta_2, n = n))\n\n# Calculate E(Ymax) and SE(Ymax)\nE_ymax_unif <- mean(maxes)\nSE_ymax_unif <- sd(maxes)\nE_ymax_unif \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.99529\n```\n:::\n\n```{.r .cell-code}\nSE_ymax_unif\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8542514\n```\n:::\n\n```{.r .cell-code}\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nunif_maxes_df <- tibble(maxes, pop = \"Uniform(7, 13)\")\nunif_maxes_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 x 2\n   maxes pop           \n   <dbl> <chr>         \n 1  12.2 Uniform(7, 13)\n 2  12.1 Uniform(7, 13)\n 3  12.7 Uniform(7, 13)\n 4  12.4 Uniform(7, 13)\n 5  11.2 Uniform(7, 13)\n 6  12.9 Uniform(7, 13)\n 7  12.7 Uniform(7, 13)\n 8  12.9 Uniform(7, 13)\n 9  12.9 Uniform(7, 13)\n10  12.8 Uniform(7, 13)\n# i 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nUnif_Max_Histogram <- ggplot(data = unif_maxes_df, aes(x = maxes)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", \n                 bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Means\",\n       title = paste(\"Samp. Dist. of Samp. Max. \n                     Uniform(7, 13)\"))\n```\n:::\n\n\n$E(Y_{max})$ = 11.9965\n\n$SE(Y_{max})$ = 0.8471\n\n\\newpage\n\n## Exponential Distribution\n\nSampling distribution of the sample minimum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nlambda <- 0.5   \n\ngenerate_samp_min <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(lambda = lambda, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1010787\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## map through th function -- the \\(i) syntax says to just \n## repeat the generate_samp_mean function nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(\n  lambda = lambda, n = n))\n\n# Calculate E(Ymin) and SE(Ymin)\nE_ymin_exp <- mean(mins)\nSE_ymin_exp <- sd(mins)\nE_ymin_exp \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3994778\n```\n:::\n\n```{.r .cell-code}\nSE_ymin_exp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4071054\n```\n:::\n\n```{.r .cell-code}\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nexp_mins_df <- tibble(mins, pop = \"Exp(0.5)\")\nexp_mins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 x 2\n     mins pop     \n    <dbl> <chr>   \n 1 0.388  Exp(0.5)\n 2 0.116  Exp(0.5)\n 3 0.127  Exp(0.5)\n 4 0.627  Exp(0.5)\n 5 0.0841 Exp(0.5)\n 6 0.337  Exp(0.5)\n 7 0.146  Exp(0.5)\n 8 0.777  Exp(0.5)\n 9 0.356  Exp(0.5)\n10 1.07   Exp(0.5)\n# i 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nExp_Min_Histogram <- ggplot(data = exp_mins_df, \n                            aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", \n                 bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Means\",\n       title = \"Samp. Dist. of Samp. Min. Exp(0.5)\")\n```\n:::\n\n\n$E(Y_{min})$ = 0.3955\n\n$SE(Y_{min})$ = 0.3922\n\nSampling distribution of the sample maximum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nlambda <- 0.5   \n\ngenerate_samp_max <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(lambda = lambda, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.185099\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## map through th function -- the \\(i) syntax says to just \n## repeat the generate_samp_mean function nsim times\nmaxes <- map_dbl(1:nsim, \\(i) generate_samp_max(\n  lambda = lambda, n = n))\n\n# Calculate E(Ymax) and SE(Ymax)\nE_ymax_exp <- mean(maxes)\nSE_ymax_exp <- sd(maxes)\nE_ymax_exp \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.547384\n```\n:::\n\n```{.r .cell-code}\nSE_ymax_exp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.396427\n```\n:::\n\n```{.r .cell-code}\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nexp_maxes_df <- tibble(maxes, pop = \"Exp(0.5)\")\nexp_maxes_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 x 2\n   maxes pop     \n   <dbl> <chr>   \n 1  5.69 Exp(0.5)\n 2  2.52 Exp(0.5)\n 3  2.48 Exp(0.5)\n 4  1.71 Exp(0.5)\n 5  3.84 Exp(0.5)\n 6  2.27 Exp(0.5)\n 7  5.57 Exp(0.5)\n 8  1.64 Exp(0.5)\n 9  7.25 Exp(0.5)\n10  7.89 Exp(0.5)\n# i 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nExp_Max_Histogram <- ggplot(data = exp_maxes_df, \n                            aes(x = maxes)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", \n                 bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Means\",\n       title = \"Samp. Dist. of Samp. Max. Exp(0.5)\")\n```\n:::\n\n\n$E(Y_{max})$ = 4.5812\n\n$SE(Y_{max})$ = 2.4562\n\n\\newpage\n\n## Beta Distribution\n\nSampling distribution of the sample minimum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nalpha <- 8\nbeta <- 2\n\ngenerate_samp_min <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(alpha = alpha, beta = beta, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6075465\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## map through th function -- the \\(i) syntax says to just \n## repeat the generate_samp_mean function nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(\n  alpha = alpha, beta = beta, n = n))\n\n# Calculate E(Ymin) and SE(Ymin)\nE_ymin_beta <- mean(mins)\nSE_ymin_beta <- sd(mins)\nE_ymin_beta \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6456545\n```\n:::\n\n```{.r .cell-code}\nSE_ymin_beta\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1056021\n```\n:::\n\n```{.r .cell-code}\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nbeta_mins_df <- tibble(mins, pop = \"Beta(8, 2)\")\nbeta_mins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 x 2\n    mins pop       \n   <dbl> <chr>     \n 1 0.664 Beta(8, 2)\n 2 0.641 Beta(8, 2)\n 3 0.670 Beta(8, 2)\n 4 0.473 Beta(8, 2)\n 5 0.519 Beta(8, 2)\n 6 0.724 Beta(8, 2)\n 7 0.571 Beta(8, 2)\n 8 0.763 Beta(8, 2)\n 9 0.653 Beta(8, 2)\n10 0.386 Beta(8, 2)\n# i 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nBeta_Min_Histogram <- ggplot(data = beta_mins_df,\n                             aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", \n                 bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Means\",\n       title = \"Samp. Dist. of Samp. Min. Beta(8, 2)\")\n```\n:::\n\n\n$E(Y_{min})$ = 0.6471\n\n$SE(Y_{min})$ = 0.1079\n\nSampling distribution of the sample maximum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nalpha <- 8\nbeta <- 2\n\ngenerate_samp_max <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(alpha = alpha, beta = beta, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9412805\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## map through th function -- the \\(i) syntax says to just \n## repeat the generate_samp_mean function nsim times\nmaxes <- map_dbl(1:nsim, \\(i) generate_samp_max(\n  alpha = alpha, beta = beta, n = n))\n\n# Calculate E(Ymax) and SE(Ymax)\nE_ymax_beta <- mean(maxes)\nSE_ymax_beta <- sd(maxes)\nE_ymax_beta \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9221206\n```\n:::\n\n```{.r .cell-code}\nSE_ymax_beta\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.04492425\n```\n:::\n\n```{.r .cell-code}\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nbeta_maxes_df <- tibble(maxes, pop = \"Beta(8, 2)\")\nbeta_maxes_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 x 2\n   maxes pop       \n   <dbl> <chr>     \n 1 0.941 Beta(8, 2)\n 2 0.941 Beta(8, 2)\n 3 0.957 Beta(8, 2)\n 4 0.904 Beta(8, 2)\n 5 0.846 Beta(8, 2)\n 6 0.963 Beta(8, 2)\n 7 0.913 Beta(8, 2)\n 8 0.902 Beta(8, 2)\n 9 0.899 Beta(8, 2)\n10 0.988 Beta(8, 2)\n# i 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nBeta_Max_Histogram <- ggplot(data = beta_maxes_df,\n                             aes(x = maxes)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", \n                 bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Means\",\n       title = \"Samp. Dist. of Samp. Max. Beta(8, 2)\")\n```\n:::\n\n\n$E(Y_{max})$ = 0.9219\n\n$SE(Y_{max})$ = 0.0464\n\n\\newpage\n\n## Histograms of the simulated distribution of the sample minimum\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_plot <- bind_rows(norm_mins_df, unif_mins_df, \n                      exp_mins_df, beta_mins_df) |>\n  mutate(pop = fct_relevel(pop, \n                           c(\"Normal(10, 4)\", \"Uniform(7, 13)\",\n                                  \"Exp(0.5)\", \"Beta(8, 2)\")))\n\nggplot(data = pop_plot, aes(x = mins)) +\n  geom_histogram() +\n  theme_minimal() +\n  facet_wrap(~ pop, nrow = 1, scales = \"free\") +\n  labs(title = \"Histograms of the simulated distribution of the sample minimum\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\\newpage\n\n## Histograms of the simulated distribution of the sample maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_plot_2 <- bind_rows(norm_maxes_df, unif_maxes_df, \n                      exp_maxes_df, beta_maxes_df) |>\n  mutate(pop = fct_relevel(pop, \n                           c(\"Normal(10, 4)\", \"Uniform(7, 13)\",\n                                  \"Exp(0.5)\", \"Beta(8, 2)\")))\n\nggplot(data = pop_plot_2, aes(x = maxes)) +\n  geom_histogram() +\n  theme_minimal() +\n  facet_wrap(~ pop, nrow = 1, scales = \"free\") +\n  labs(title = \"Histograms of the simulated distribution of the sample minimum\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\\newpage\n\n## Table of Results\n\n|                      | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n| $\\text{E}(Y_{min})$  |               7.6848               |                   8.0031                   |           0.3955            |                0.6471                |\n| $\\text{E}(Y_{max})$  |              12.3333               |                  11.9965                   |           4.5812            |                0.9219                |\n|                      |                                    |                                            |                             |                                      |\n| $\\text{SE}(Y_{min})$ |               1.3464               |                   0.8446                   |           0.3922            |                0.1079                |\n| $\\text{SE}(Y_{max})$ |               1.3558               |                   0.8471                   |           2.4562            |                0.0464                |\n\n: Table of Results {.striped .hover}\n\n\\newpage\n\n## Questions\n\n**Question 1:** For the normal distribution and the uniform distribution, $SE(Y_{min})$ and $SE(Y_{max})$ are nearly identical, and I think that we can make the result that we expect $SE(Y_{min})$ and $SE(Y_{max})$ to be the same for Normal and Uniform distributions. However, for the Exponential and the Beta distributions, a rule appears less clear-cut to make. It makes sense to make a general rule that we expect $SE(Y_{max})$ to be significantly higher than $SE(Y_{min})$ for the Exponential distribution, and we expect $SE(Y_{min})$ to be significantly higher than $SE(Y_{max})$ for the Beta distribution.\n\n**Question 2:** (Choosing the third option, exponential)\n\nNote: I looked up how to calculate integrals in R so I could keep the work in the same file.\n\nCalculate the pdfs:\n\n$Y_{min}$ pdf: $= n(1 - F(y))^{n-1} * f(y)$\n\n= $n (1 + e^{-\\lambda*y})^{n-1} * \\lambda * e^{-\\lambda*y}$\n\n$Y_{max}$ pdf: $= n(-e^{-\\lambda * y})^{n - 1} * \\lambda * e^{-\\lambda*y}$\n\nPlot the pdfs in R:\n\npdf of $Y_{min}$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 3, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <- \n  n * (1 + exp(-lambda * x))^(n - 1) * lambda * exp(-lambda * x)\n\n## put into tibble and plot\nsamp_min_df <- tibble(x, density)\nggplot(data = samp_min_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\npdf of $Y_{max}$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 3, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <- n * (-exp(-lambda * x))^(n-1) * lambda * exp(-lambda * x)\n\n## put into tibble and plot\nsamp_min_df <- tibble(x, density)\nggplot(data = samp_min_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nUse integrals to calculate expected value and standard error for $Y_{min}$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_ymin <- function(x) {\n  x * n * (1 - exp(-lambda * x))^(n - 1) * lambda * exp(-lambda * x)\n}\n\nE_ymin <- integrate(function_ymin, lower = 0, upper = Inf)\n```\n:::\n\n\nCalculate expected value and standard error for $Y_{max}$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_ymax <- function(x) {\n  x * n * (-exp(-lambda * x))^(n-1) * lambda * exp(-lambda * x)\n}\n\nE_ymax = integrate(function_ymax, lower = 0, upper = Inf)\n```\n:::\n\n\nMy answers are essentially swapped, with my E(Ymin) being what my E(Ymax) was in the table. I am assuming I accidentally swapped something somewhere that I can't find, so I believe that my answers are nearly equal to the simulated answers, but are slightly off. (roughly just 0.01 off from my simulated expected values).\n\nCalculate standard errors using integrals:\n\n$Y_{min}$ se:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_ymin_se <- function(x) {\n  x^2 * n * (1 - exp(-lambda * x))^(n - 1) * lambda * exp(-lambda * x)\n}\n\nE_ymin2 <- integrate(function_ymin_se, lower = 0, upper = Inf)\n\n# E_ymin = 4.56667\n# E(ymin^2) = 26.7089\nse_ymin <- sqrt(26.7089 - 4.5667^2)\nse_ymin # = 2.4195\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.419535\n```\n:::\n:::\n\n\n$Y_{max}$ se:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_ymax_se <- function(x) {\n  x^2 * n * (-exp(-lambda * x))^(n-1) * lambda * exp(-lambda * x)\n}\n\nE_ymax2 = integrate(function_ymax_se, lower = 0, upper = Inf)\n\n# E_ymax = 0.4\n# E(ymax^2) = 0.32\nse_ymax <- sqrt(0.32 - 0.32^2)\nse_ymax # = 0.4665\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4664762\n```\n:::\n:::\n\n\nBoth of the SE's are also similar to what we calculated in the simulation, but this time a little farther off from the results from the simulation than it was with the expected values. (About \\~0.15 and \\~ 0.07 off).\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}